type AggregateGame {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Game {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  gameType: String!
  result: String!
  kills: Int
  deaths: Int
}

type GameConnection {
  pageInfo: PageInfo!
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  id: ID
  author: UserCreateOneWithoutGamesInput!
  gameType: String!
  result: String!
  kills: Int
  deaths: Int
}

input GameCreateManyWithoutAuthorInput {
  create: [GameCreateWithoutAuthorInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateWithoutAuthorInput {
  id: ID
  gameType: String!
  result: String!
  kills: Int
  deaths: Int
}

type GameEdge {
  node: Game!
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  gameType_ASC
  gameType_DESC
  result_ASC
  result_DESC
  kills_ASC
  kills_DESC
  deaths_ASC
  deaths_DESC
}

type GamePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gameType: String!
  result: String!
  kills: Int
  deaths: Int
}

input GameScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  gameType: String
  gameType_not: String
  gameType_in: [String!]
  gameType_not_in: [String!]
  gameType_lt: String
  gameType_lte: String
  gameType_gt: String
  gameType_gte: String
  gameType_contains: String
  gameType_not_contains: String
  gameType_starts_with: String
  gameType_not_starts_with: String
  gameType_ends_with: String
  gameType_not_ends_with: String
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  kills: Int
  kills_not: Int
  kills_in: [Int!]
  kills_not_in: [Int!]
  kills_lt: Int
  kills_lte: Int
  kills_gt: Int
  kills_gte: Int
  deaths: Int
  deaths_not: Int
  deaths_in: [Int!]
  deaths_not_in: [Int!]
  deaths_lt: Int
  deaths_lte: Int
  deaths_gt: Int
  deaths_gte: Int
  AND: [GameScalarWhereInput!]
  OR: [GameScalarWhereInput!]
  NOT: [GameScalarWhereInput!]
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameWhereInput
  AND: [GameSubscriptionWhereInput!]
  OR: [GameSubscriptionWhereInput!]
  NOT: [GameSubscriptionWhereInput!]
}

input GameUpdateInput {
  author: UserUpdateOneRequiredWithoutGamesInput
  gameType: String
  result: String
  kills: Int
  deaths: Int
}

input GameUpdateManyDataInput {
  gameType: String
  result: String
  kills: Int
  deaths: Int
}

input GameUpdateManyMutationInput {
  gameType: String
  result: String
  kills: Int
  deaths: Int
}

input GameUpdateManyWithoutAuthorInput {
  create: [GameCreateWithoutAuthorInput!]
  delete: [GameWhereUniqueInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [GameUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [GameScalarWhereInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
}

input GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput!
  data: GameUpdateManyDataInput!
}

input GameUpdateWithoutAuthorDataInput {
  gameType: String
  result: String
  kills: Int
  deaths: Int
}

input GameUpdateWithWhereUniqueWithoutAuthorInput {
  where: GameWhereUniqueInput!
  data: GameUpdateWithoutAuthorDataInput!
}

input GameUpsertWithWhereUniqueWithoutAuthorInput {
  where: GameWhereUniqueInput!
  update: GameUpdateWithoutAuthorDataInput!
  create: GameCreateWithoutAuthorInput!
}

input GameWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  author: UserWhereInput
  gameType: String
  gameType_not: String
  gameType_in: [String!]
  gameType_not_in: [String!]
  gameType_lt: String
  gameType_lte: String
  gameType_gt: String
  gameType_gte: String
  gameType_contains: String
  gameType_not_contains: String
  gameType_starts_with: String
  gameType_not_starts_with: String
  gameType_ends_with: String
  gameType_not_ends_with: String
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  kills: Int
  kills_not: Int
  kills_in: [Int!]
  kills_not_in: [Int!]
  kills_lt: Int
  kills_lte: Int
  kills_gt: Int
  kills_gte: Int
  deaths: Int
  deaths_not: Int
  deaths_in: [Int!]
  deaths_not_in: [Int!]
  deaths_lt: Int
  deaths_lte: Int
  deaths_gt: Int
  deaths_gte: Int
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
}

input GameWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createGame(data: GameCreateInput!): Game!
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteManyGames(where: GameWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  game(where: GameWhereUniqueInput!): Game
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  password: String!
  gamertag: String!
  admin: Boolean!
  h2rank: Int!
  h3rank: Int!
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  resetToken: String
  resetTokenExpiry: Float
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
  gamertag: String!
  admin: Boolean
  h2rank: Int
  h3rank: Int
  friends: UserCreateManyInput
  resetToken: String
  resetTokenExpiry: Float
  games: GameCreateManyWithoutAuthorInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutGamesInput {
  create: UserCreateWithoutGamesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGamesInput {
  id: ID
  username: String!
  password: String!
  gamertag: String!
  admin: Boolean
  h2rank: Int
  h3rank: Int
  friends: UserCreateManyInput
  resetToken: String
  resetTokenExpiry: Float
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  gamertag_ASC
  gamertag_DESC
  admin_ASC
  admin_DESC
  h2rank_ASC
  h2rank_DESC
  h3rank_ASC
  h3rank_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
  gamertag: String!
  admin: Boolean!
  h2rank: Int!
  h3rank: Int!
  resetToken: String
  resetTokenExpiry: Float
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  gamertag: String
  gamertag_not: String
  gamertag_in: [String!]
  gamertag_not_in: [String!]
  gamertag_lt: String
  gamertag_lte: String
  gamertag_gt: String
  gamertag_gte: String
  gamertag_contains: String
  gamertag_not_contains: String
  gamertag_starts_with: String
  gamertag_not_starts_with: String
  gamertag_ends_with: String
  gamertag_not_ends_with: String
  admin: Boolean
  admin_not: Boolean
  h2rank: Int
  h2rank_not: Int
  h2rank_in: [Int!]
  h2rank_not_in: [Int!]
  h2rank_lt: Int
  h2rank_lte: Int
  h2rank_gt: Int
  h2rank_gte: Int
  h3rank: Int
  h3rank_not: Int
  h3rank_in: [Int!]
  h3rank_not_in: [Int!]
  h3rank_lt: Int
  h3rank_lte: Int
  h3rank_gt: Int
  h3rank_gte: Int
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  password: String
  gamertag: String
  admin: Boolean
  h2rank: Int
  h3rank: Int
  friends: UserUpdateManyInput
  resetToken: String
  resetTokenExpiry: Float
  games: GameUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  username: String
  password: String
  gamertag: String
  admin: Boolean
  h2rank: Int
  h3rank: Int
  friends: UserUpdateManyInput
  resetToken: String
  resetTokenExpiry: Float
  games: GameUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  username: String
  password: String
  gamertag: String
  admin: Boolean
  h2rank: Int
  h3rank: Int
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  gamertag: String
  admin: Boolean
  h2rank: Int
  h3rank: Int
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutGamesInput {
  create: UserCreateWithoutGamesInput
  update: UserUpdateWithoutGamesDataInput
  upsert: UserUpsertWithoutGamesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGamesDataInput {
  username: String
  password: String
  gamertag: String
  admin: Boolean
  h2rank: Int
  h3rank: Int
  friends: UserUpdateManyInput
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertWithoutGamesInput {
  update: UserUpdateWithoutGamesDataInput!
  create: UserCreateWithoutGamesInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  gamertag: String
  gamertag_not: String
  gamertag_in: [String!]
  gamertag_not_in: [String!]
  gamertag_lt: String
  gamertag_lte: String
  gamertag_gt: String
  gamertag_gte: String
  gamertag_contains: String
  gamertag_not_contains: String
  gamertag_starts_with: String
  gamertag_not_starts_with: String
  gamertag_ends_with: String
  gamertag_not_ends_with: String
  admin: Boolean
  admin_not: Boolean
  h2rank: Int
  h2rank_not: Int
  h2rank_in: [Int!]
  h2rank_not_in: [Int!]
  h2rank_lt: Int
  h2rank_lte: Int
  h2rank_gt: Int
  h2rank_gte: Int
  h3rank: Int
  h3rank_not: Int
  h3rank_in: [Int!]
  h3rank_not_in: [Int!]
  h3rank_lt: Int
  h3rank_lte: Int
  h3rank_gt: Int
  h3rank_gte: Int
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  games_every: GameWhereInput
  games_some: GameWhereInput
  games_none: GameWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  gamertag: String
}
