type AggregateDesign {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Design {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String
  author: User!
}

type DesignConnection {
  pageInfo: PageInfo!
  edges: [DesignEdge]!
  aggregate: AggregateDesign!
}

input DesignCreateInput {
  published: Boolean
  title: String!
  content: String
  author: UserCreateOneWithoutDesignsInput!
}

input DesignCreateManyWithoutAuthorInput {
  create: [DesignCreateWithoutAuthorInput!]
  connect: [DesignWhereUniqueInput!]
}

input DesignCreateWithoutAuthorInput {
  published: Boolean
  title: String!
  content: String
}

type DesignEdge {
  node: Design!
  cursor: String!
}

enum DesignOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type DesignPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String
}

input DesignScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [DesignScalarWhereInput!]
  OR: [DesignScalarWhereInput!]
  NOT: [DesignScalarWhereInput!]
}

type DesignSubscriptionPayload {
  mutation: MutationType!
  node: Design
  updatedFields: [String!]
  previousValues: DesignPreviousValues
}

input DesignSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DesignWhereInput
  AND: [DesignSubscriptionWhereInput!]
  OR: [DesignSubscriptionWhereInput!]
  NOT: [DesignSubscriptionWhereInput!]
}

input DesignUpdateInput {
  published: Boolean
  title: String
  content: String
  author: UserUpdateOneRequiredWithoutDesignsInput
}

input DesignUpdateManyDataInput {
  published: Boolean
  title: String
  content: String
}

input DesignUpdateManyMutationInput {
  published: Boolean
  title: String
  content: String
}

input DesignUpdateManyWithoutAuthorInput {
  create: [DesignCreateWithoutAuthorInput!]
  delete: [DesignWhereUniqueInput!]
  connect: [DesignWhereUniqueInput!]
  set: [DesignWhereUniqueInput!]
  disconnect: [DesignWhereUniqueInput!]
  update: [DesignUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [DesignUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [DesignScalarWhereInput!]
  updateMany: [DesignUpdateManyWithWhereNestedInput!]
}

input DesignUpdateManyWithWhereNestedInput {
  where: DesignScalarWhereInput!
  data: DesignUpdateManyDataInput!
}

input DesignUpdateWithoutAuthorDataInput {
  published: Boolean
  title: String
  content: String
}

input DesignUpdateWithWhereUniqueWithoutAuthorInput {
  where: DesignWhereUniqueInput!
  data: DesignUpdateWithoutAuthorDataInput!
}

input DesignUpsertWithWhereUniqueWithoutAuthorInput {
  where: DesignWhereUniqueInput!
  update: DesignUpdateWithoutAuthorDataInput!
  create: DesignCreateWithoutAuthorInput!
}

input DesignWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: UserWhereInput
  AND: [DesignWhereInput!]
  OR: [DesignWhereInput!]
  NOT: [DesignWhereInput!]
}

input DesignWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createDesign(data: DesignCreateInput!): Design!
  updateDesign(data: DesignUpdateInput!, where: DesignWhereUniqueInput!): Design
  updateManyDesigns(data: DesignUpdateManyMutationInput!, where: DesignWhereInput): BatchPayload!
  upsertDesign(where: DesignWhereUniqueInput!, create: DesignCreateInput!, update: DesignUpdateInput!): Design!
  deleteDesign(where: DesignWhereUniqueInput!): Design
  deleteManyDesigns(where: DesignWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  ITEMCREATE
  ITEMUPDATE
  ITEMDELETE
  PERMISSIONUPDATE
}

type Query {
  design(where: DesignWhereUniqueInput!): Design
  designs(where: DesignWhereInput, orderBy: DesignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Design]!
  designsConnection(where: DesignWhereInput, orderBy: DesignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DesignConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  design(where: DesignSubscriptionWhereInput): DesignSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  password: String!
  firstName: String
  lastName: String
  admin: Boolean!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  designs(where: DesignWhereInput, orderBy: DesignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Design!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  password: String!
  firstName: String
  lastName: String
  admin: Boolean
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  designs: DesignCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutDesignsInput {
  create: UserCreateWithoutDesignsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutDesignsInput {
  username: String!
  password: String!
  firstName: String
  lastName: String
  admin: Boolean
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  admin_ASC
  admin_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
  firstName: String
  lastName: String
  admin: Boolean!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  password: String
  firstName: String
  lastName: String
  admin: Boolean
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  designs: DesignUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  firstName: String
  lastName: String
  admin: Boolean
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredWithoutDesignsInput {
  create: UserCreateWithoutDesignsInput
  update: UserUpdateWithoutDesignsDataInput
  upsert: UserUpsertWithoutDesignsInput
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutDesignsDataInput {
  username: String
  password: String
  firstName: String
  lastName: String
  admin: Boolean
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpsertWithoutDesignsInput {
  update: UserUpdateWithoutDesignsDataInput!
  create: UserCreateWithoutDesignsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  admin: Boolean
  admin_not: Boolean
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  designs_every: DesignWhereInput
  designs_some: DesignWhereInput
  designs_none: DesignWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
