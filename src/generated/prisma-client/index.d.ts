// Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  design: (where?: DesignWhereInput) => Promise<boolean>;
  load: (where?: LoadWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  design: (where: DesignWhereUniqueInput) => DesignPromise;
  designs: (args?: {
    where?: DesignWhereInput;
    orderBy?: DesignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Design>;
  designsConnection: (args?: {
    where?: DesignWhereInput;
    orderBy?: DesignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DesignConnectionPromise;
  load: (where: LoadWhereUniqueInput) => LoadPromise;
  loads: (args?: {
    where?: LoadWhereInput;
    orderBy?: LoadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Load>;
  loadsConnection: (args?: {
    where?: LoadWhereInput;
    orderBy?: LoadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LoadConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDesign: (data: DesignCreateInput) => DesignPromise;
  updateDesign: (args: {
    data: DesignUpdateInput;
    where: DesignWhereUniqueInput;
  }) => DesignPromise;
  updateManyDesigns: (args: {
    data: DesignUpdateManyMutationInput;
    where?: DesignWhereInput;
  }) => BatchPayloadPromise;
  upsertDesign: (args: {
    where: DesignWhereUniqueInput;
    create: DesignCreateInput;
    update: DesignUpdateInput;
  }) => DesignPromise;
  deleteDesign: (where: DesignWhereUniqueInput) => DesignPromise;
  deleteManyDesigns: (where?: DesignWhereInput) => BatchPayloadPromise;
  createLoad: (data: LoadCreateInput) => LoadPromise;
  updateLoad: (args: {
    data: LoadUpdateInput;
    where: LoadWhereUniqueInput;
  }) => LoadPromise;
  updateManyLoads: (args: {
    data: LoadUpdateManyMutationInput;
    where?: LoadWhereInput;
  }) => BatchPayloadPromise;
  upsertLoad: (args: {
    where: LoadWhereUniqueInput;
    create: LoadCreateInput;
    update: LoadUpdateInput;
  }) => LoadPromise;
  deleteLoad: (where: LoadWhereUniqueInput) => LoadPromise;
  deleteManyLoads: (where?: LoadWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  design: (
    where?: DesignSubscriptionWhereInput
  ) => DesignSubscriptionPayloadSubscription;
  load: (
    where?: LoadSubscriptionWhereInput
  ) => LoadSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Permission =
  | "ADMIN"
  | "USER"
  | "DESIGNCREATE"
  | "DESIGNUPDATE"
  | "DESIGNDELETE"
  | "PERMISSIONUPDATE";

export type DesignOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "modified_ASC"
  | "modified_DESC"
  | "deanery_ASC"
  | "deanery_DESC"
  | "location_ASC"
  | "location_DESC"
  | "parish_ASC"
  | "parish_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "longitudeDir_ASC"
  | "longitudeDir_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "latitudeDir_ASC"
  | "latitudeDir_DESC"
  | "gridTied_ASC"
  | "gridTied_DESC"
  | "generator_ASC"
  | "generator_DESC"
  | "voltage_ASC"
  | "voltage_DESC"
  | "freq_ASC"
  | "freq_DESC"
  | "phase_ASC"
  | "phase_DESC"
  | "area_roof_ASC"
  | "area_roof_DESC"
  | "area_ground_ASC"
  | "area_ground_DESC";

export type LoadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "power_ASC"
  | "power_DESC"
  | "dayUsage_ASC"
  | "dayUsage_DESC"
  | "nightUsage_ASC"
  | "nightUsage_DESC"
  | "usageDays_ASC"
  | "usageDays_DESC"
  | "surgeMult_ASC"
  | "surgeMult_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "admin_ASC"
  | "admin_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpsertWithoutDesignsInput {
  update: UserUpdateWithoutDesignsDataInput;
  create: UserCreateWithoutDesignsInput;
}

export type DesignWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateOneWithoutDesignsInput {
  create?: UserCreateWithoutDesignsInput;
  connect?: UserWhereUniqueInput;
}

export interface LoadUpdateInput {
  name?: String;
  quantity?: Float;
  power?: Float;
  dayUsage?: Float;
  nightUsage?: Float;
  usageDays?: Float;
  surgeMult?: Float;
  design?: DesignUpdateOneRequiredWithoutLoadsInput;
}

export interface UserCreateWithoutDesignsInput {
  id?: ID_Input;
  username: String;
  password: String;
  firstName?: String;
  lastName?: String;
  admin?: Boolean;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions?: UserCreatepermissionsInput;
}

export interface LoadUpsertWithWhereUniqueWithoutDesignInput {
  where: LoadWhereUniqueInput;
  update: LoadUpdateWithoutDesignDataInput;
  create: LoadCreateWithoutDesignInput;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  admin?: Boolean;
  admin_not?: Boolean;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: Float;
  resetTokenExpiry_not?: Float;
  resetTokenExpiry_in?: Float[] | Float;
  resetTokenExpiry_not_in?: Float[] | Float;
  resetTokenExpiry_lt?: Float;
  resetTokenExpiry_lte?: Float;
  resetTokenExpiry_gt?: Float;
  resetTokenExpiry_gte?: Float;
  designs_every?: DesignWhereInput;
  designs_some?: DesignWhereInput;
  designs_none?: DesignWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface LoadCreateManyWithoutDesignInput {
  create?: LoadCreateWithoutDesignInput[] | LoadCreateWithoutDesignInput;
  connect?: LoadWhereUniqueInput[] | LoadWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface LoadCreateWithoutDesignInput {
  id?: ID_Input;
  name?: String;
  quantity: Float;
  power: Float;
  dayUsage: Float;
  nightUsage: Float;
  usageDays: Float;
  surgeMult: Float;
}

export interface DesignSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DesignWhereInput;
  AND?: DesignSubscriptionWhereInput[] | DesignSubscriptionWhereInput;
  OR?: DesignSubscriptionWhereInput[] | DesignSubscriptionWhereInput;
  NOT?: DesignSubscriptionWhereInput[] | DesignSubscriptionWhereInput;
}

export interface DesignUpdateInput {
  modified?: Boolean;
  author?: UserUpdateOneRequiredWithoutDesignsInput;
  deanery?: String;
  location?: String;
  parish?: String;
  longitude?: Float;
  longitudeDir?: String;
  latitude?: Float;
  latitudeDir?: String;
  gridTied?: String;
  generator?: String;
  voltage?: String;
  freq?: String;
  phase?: String;
  area_roof?: Float;
  area_ground?: Float;
  loads?: LoadUpdateManyWithoutDesignInput;
}

export interface DesignUpdateManyDataInput {
  modified?: Boolean;
  deanery?: String;
  location?: String;
  parish?: String;
  longitude?: Float;
  longitudeDir?: String;
  latitude?: Float;
  latitudeDir?: String;
  gridTied?: String;
  generator?: String;
  voltage?: String;
  freq?: String;
  phase?: String;
  area_roof?: Float;
  area_ground?: Float;
}

export interface UserUpdateOneRequiredWithoutDesignsInput {
  create?: UserCreateWithoutDesignsInput;
  update?: UserUpdateWithoutDesignsDataInput;
  upsert?: UserUpsertWithoutDesignsInput;
  connect?: UserWhereUniqueInput;
}

export interface DesignScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  modified?: Boolean;
  modified_not?: Boolean;
  deanery?: String;
  deanery_not?: String;
  deanery_in?: String[] | String;
  deanery_not_in?: String[] | String;
  deanery_lt?: String;
  deanery_lte?: String;
  deanery_gt?: String;
  deanery_gte?: String;
  deanery_contains?: String;
  deanery_not_contains?: String;
  deanery_starts_with?: String;
  deanery_not_starts_with?: String;
  deanery_ends_with?: String;
  deanery_not_ends_with?: String;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  parish?: String;
  parish_not?: String;
  parish_in?: String[] | String;
  parish_not_in?: String[] | String;
  parish_lt?: String;
  parish_lte?: String;
  parish_gt?: String;
  parish_gte?: String;
  parish_contains?: String;
  parish_not_contains?: String;
  parish_starts_with?: String;
  parish_not_starts_with?: String;
  parish_ends_with?: String;
  parish_not_ends_with?: String;
  longitude?: Float;
  longitude_not?: Float;
  longitude_in?: Float[] | Float;
  longitude_not_in?: Float[] | Float;
  longitude_lt?: Float;
  longitude_lte?: Float;
  longitude_gt?: Float;
  longitude_gte?: Float;
  longitudeDir?: String;
  longitudeDir_not?: String;
  longitudeDir_in?: String[] | String;
  longitudeDir_not_in?: String[] | String;
  longitudeDir_lt?: String;
  longitudeDir_lte?: String;
  longitudeDir_gt?: String;
  longitudeDir_gte?: String;
  longitudeDir_contains?: String;
  longitudeDir_not_contains?: String;
  longitudeDir_starts_with?: String;
  longitudeDir_not_starts_with?: String;
  longitudeDir_ends_with?: String;
  longitudeDir_not_ends_with?: String;
  latitude?: Float;
  latitude_not?: Float;
  latitude_in?: Float[] | Float;
  latitude_not_in?: Float[] | Float;
  latitude_lt?: Float;
  latitude_lte?: Float;
  latitude_gt?: Float;
  latitude_gte?: Float;
  latitudeDir?: String;
  latitudeDir_not?: String;
  latitudeDir_in?: String[] | String;
  latitudeDir_not_in?: String[] | String;
  latitudeDir_lt?: String;
  latitudeDir_lte?: String;
  latitudeDir_gt?: String;
  latitudeDir_gte?: String;
  latitudeDir_contains?: String;
  latitudeDir_not_contains?: String;
  latitudeDir_starts_with?: String;
  latitudeDir_not_starts_with?: String;
  latitudeDir_ends_with?: String;
  latitudeDir_not_ends_with?: String;
  gridTied?: String;
  gridTied_not?: String;
  gridTied_in?: String[] | String;
  gridTied_not_in?: String[] | String;
  gridTied_lt?: String;
  gridTied_lte?: String;
  gridTied_gt?: String;
  gridTied_gte?: String;
  gridTied_contains?: String;
  gridTied_not_contains?: String;
  gridTied_starts_with?: String;
  gridTied_not_starts_with?: String;
  gridTied_ends_with?: String;
  gridTied_not_ends_with?: String;
  generator?: String;
  generator_not?: String;
  generator_in?: String[] | String;
  generator_not_in?: String[] | String;
  generator_lt?: String;
  generator_lte?: String;
  generator_gt?: String;
  generator_gte?: String;
  generator_contains?: String;
  generator_not_contains?: String;
  generator_starts_with?: String;
  generator_not_starts_with?: String;
  generator_ends_with?: String;
  generator_not_ends_with?: String;
  voltage?: String;
  voltage_not?: String;
  voltage_in?: String[] | String;
  voltage_not_in?: String[] | String;
  voltage_lt?: String;
  voltage_lte?: String;
  voltage_gt?: String;
  voltage_gte?: String;
  voltage_contains?: String;
  voltage_not_contains?: String;
  voltage_starts_with?: String;
  voltage_not_starts_with?: String;
  voltage_ends_with?: String;
  voltage_not_ends_with?: String;
  freq?: String;
  freq_not?: String;
  freq_in?: String[] | String;
  freq_not_in?: String[] | String;
  freq_lt?: String;
  freq_lte?: String;
  freq_gt?: String;
  freq_gte?: String;
  freq_contains?: String;
  freq_not_contains?: String;
  freq_starts_with?: String;
  freq_not_starts_with?: String;
  freq_ends_with?: String;
  freq_not_ends_with?: String;
  phase?: String;
  phase_not?: String;
  phase_in?: String[] | String;
  phase_not_in?: String[] | String;
  phase_lt?: String;
  phase_lte?: String;
  phase_gt?: String;
  phase_gte?: String;
  phase_contains?: String;
  phase_not_contains?: String;
  phase_starts_with?: String;
  phase_not_starts_with?: String;
  phase_ends_with?: String;
  phase_not_ends_with?: String;
  area_roof?: Float;
  area_roof_not?: Float;
  area_roof_in?: Float[] | Float;
  area_roof_not_in?: Float[] | Float;
  area_roof_lt?: Float;
  area_roof_lte?: Float;
  area_roof_gt?: Float;
  area_roof_gte?: Float;
  area_ground?: Float;
  area_ground_not?: Float;
  area_ground_in?: Float[] | Float;
  area_ground_not_in?: Float[] | Float;
  area_ground_lt?: Float;
  area_ground_lte?: Float;
  area_ground_gt?: Float;
  area_ground_gte?: Float;
  AND?: DesignScalarWhereInput[] | DesignScalarWhereInput;
  OR?: DesignScalarWhereInput[] | DesignScalarWhereInput;
  NOT?: DesignScalarWhereInput[] | DesignScalarWhereInput;
}

export interface UserUpdateWithoutDesignsDataInput {
  username?: String;
  password?: String;
  firstName?: String;
  lastName?: String;
  admin?: Boolean;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions?: UserUpdatepermissionsInput;
}

export type LoadWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface DesignUpdateWithWhereUniqueWithoutAuthorInput {
  where: DesignWhereUniqueInput;
  data: DesignUpdateWithoutAuthorDataInput;
}

export interface LoadUpdateManyMutationInput {
  name?: String;
  quantity?: Float;
  power?: Float;
  dayUsage?: Float;
  nightUsage?: Float;
  usageDays?: Float;
  surgeMult?: Float;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
}>;

export interface LoadUpdateManyWithoutDesignInput {
  create?: LoadCreateWithoutDesignInput[] | LoadCreateWithoutDesignInput;
  delete?: LoadWhereUniqueInput[] | LoadWhereUniqueInput;
  connect?: LoadWhereUniqueInput[] | LoadWhereUniqueInput;
  set?: LoadWhereUniqueInput[] | LoadWhereUniqueInput;
  disconnect?: LoadWhereUniqueInput[] | LoadWhereUniqueInput;
  update?:
    | LoadUpdateWithWhereUniqueWithoutDesignInput[]
    | LoadUpdateWithWhereUniqueWithoutDesignInput;
  upsert?:
    | LoadUpsertWithWhereUniqueWithoutDesignInput[]
    | LoadUpsertWithWhereUniqueWithoutDesignInput;
  deleteMany?: LoadScalarWhereInput[] | LoadScalarWhereInput;
  updateMany?:
    | LoadUpdateManyWithWhereNestedInput[]
    | LoadUpdateManyWithWhereNestedInput;
}

export interface DesignCreateWithoutAuthorInput {
  id?: ID_Input;
  modified?: Boolean;
  deanery: String;
  location: String;
  parish: String;
  longitude?: Float;
  longitudeDir?: String;
  latitude?: Float;
  latitudeDir?: String;
  gridTied?: String;
  generator?: String;
  voltage?: String;
  freq?: String;
  phase?: String;
  area_roof?: Float;
  area_ground?: Float;
  loads?: LoadCreateManyWithoutDesignInput;
}

export interface LoadUpdateWithWhereUniqueWithoutDesignInput {
  where: LoadWhereUniqueInput;
  data: LoadUpdateWithoutDesignDataInput;
}

export interface UserCreateInput {
  id?: ID_Input;
  username: String;
  password: String;
  firstName?: String;
  lastName?: String;
  admin?: Boolean;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions?: UserCreatepermissionsInput;
  designs?: DesignCreateManyWithoutAuthorInput;
}

export interface LoadUpdateWithoutDesignDataInput {
  name?: String;
  quantity?: Float;
  power?: Float;
  dayUsage?: Float;
  nightUsage?: Float;
  usageDays?: Float;
  surgeMult?: Float;
}

export interface DesignCreateInput {
  id?: ID_Input;
  modified?: Boolean;
  author: UserCreateOneWithoutDesignsInput;
  deanery: String;
  location: String;
  parish: String;
  longitude?: Float;
  longitudeDir?: String;
  latitude?: Float;
  latitudeDir?: String;
  gridTied?: String;
  generator?: String;
  voltage?: String;
  freq?: String;
  phase?: String;
  area_roof?: Float;
  area_ground?: Float;
  loads?: LoadCreateManyWithoutDesignInput;
}

export interface DesignUpsertWithoutLoadsInput {
  update: DesignUpdateWithoutLoadsDataInput;
  create: DesignCreateWithoutLoadsInput;
}

export interface LoadWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  quantity?: Float;
  quantity_not?: Float;
  quantity_in?: Float[] | Float;
  quantity_not_in?: Float[] | Float;
  quantity_lt?: Float;
  quantity_lte?: Float;
  quantity_gt?: Float;
  quantity_gte?: Float;
  power?: Float;
  power_not?: Float;
  power_in?: Float[] | Float;
  power_not_in?: Float[] | Float;
  power_lt?: Float;
  power_lte?: Float;
  power_gt?: Float;
  power_gte?: Float;
  dayUsage?: Float;
  dayUsage_not?: Float;
  dayUsage_in?: Float[] | Float;
  dayUsage_not_in?: Float[] | Float;
  dayUsage_lt?: Float;
  dayUsage_lte?: Float;
  dayUsage_gt?: Float;
  dayUsage_gte?: Float;
  nightUsage?: Float;
  nightUsage_not?: Float;
  nightUsage_in?: Float[] | Float;
  nightUsage_not_in?: Float[] | Float;
  nightUsage_lt?: Float;
  nightUsage_lte?: Float;
  nightUsage_gt?: Float;
  nightUsage_gte?: Float;
  usageDays?: Float;
  usageDays_not?: Float;
  usageDays_in?: Float[] | Float;
  usageDays_not_in?: Float[] | Float;
  usageDays_lt?: Float;
  usageDays_lte?: Float;
  usageDays_gt?: Float;
  usageDays_gte?: Float;
  surgeMult?: Float;
  surgeMult_not?: Float;
  surgeMult_in?: Float[] | Float;
  surgeMult_not_in?: Float[] | Float;
  surgeMult_lt?: Float;
  surgeMult_lte?: Float;
  surgeMult_gt?: Float;
  surgeMult_gte?: Float;
  design?: DesignWhereInput;
  AND?: LoadWhereInput[] | LoadWhereInput;
  OR?: LoadWhereInput[] | LoadWhereInput;
  NOT?: LoadWhereInput[] | LoadWhereInput;
}

export interface LoadScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  quantity?: Float;
  quantity_not?: Float;
  quantity_in?: Float[] | Float;
  quantity_not_in?: Float[] | Float;
  quantity_lt?: Float;
  quantity_lte?: Float;
  quantity_gt?: Float;
  quantity_gte?: Float;
  power?: Float;
  power_not?: Float;
  power_in?: Float[] | Float;
  power_not_in?: Float[] | Float;
  power_lt?: Float;
  power_lte?: Float;
  power_gt?: Float;
  power_gte?: Float;
  dayUsage?: Float;
  dayUsage_not?: Float;
  dayUsage_in?: Float[] | Float;
  dayUsage_not_in?: Float[] | Float;
  dayUsage_lt?: Float;
  dayUsage_lte?: Float;
  dayUsage_gt?: Float;
  dayUsage_gte?: Float;
  nightUsage?: Float;
  nightUsage_not?: Float;
  nightUsage_in?: Float[] | Float;
  nightUsage_not_in?: Float[] | Float;
  nightUsage_lt?: Float;
  nightUsage_lte?: Float;
  nightUsage_gt?: Float;
  nightUsage_gte?: Float;
  usageDays?: Float;
  usageDays_not?: Float;
  usageDays_in?: Float[] | Float;
  usageDays_not_in?: Float[] | Float;
  usageDays_lt?: Float;
  usageDays_lte?: Float;
  usageDays_gt?: Float;
  usageDays_gte?: Float;
  surgeMult?: Float;
  surgeMult_not?: Float;
  surgeMult_in?: Float[] | Float;
  surgeMult_not_in?: Float[] | Float;
  surgeMult_lt?: Float;
  surgeMult_lte?: Float;
  surgeMult_gt?: Float;
  surgeMult_gte?: Float;
  AND?: LoadScalarWhereInput[] | LoadScalarWhereInput;
  OR?: LoadScalarWhereInput[] | LoadScalarWhereInput;
  NOT?: LoadScalarWhereInput[] | LoadScalarWhereInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  password?: String;
  firstName?: String;
  lastName?: String;
  admin?: Boolean;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions?: UserUpdatepermissionsInput;
}

export interface LoadUpdateManyWithWhereNestedInput {
  where: LoadScalarWhereInput;
  data: LoadUpdateManyDataInput;
}

export interface DesignUpsertWithWhereUniqueWithoutAuthorInput {
  where: DesignWhereUniqueInput;
  update: DesignUpdateWithoutAuthorDataInput;
  create: DesignCreateWithoutAuthorInput;
}

export interface LoadUpdateManyDataInput {
  name?: String;
  quantity?: Float;
  power?: Float;
  dayUsage?: Float;
  nightUsage?: Float;
  usageDays?: Float;
  surgeMult?: Float;
}

export interface DesignUpdateManyWithoutAuthorInput {
  create?: DesignCreateWithoutAuthorInput[] | DesignCreateWithoutAuthorInput;
  delete?: DesignWhereUniqueInput[] | DesignWhereUniqueInput;
  connect?: DesignWhereUniqueInput[] | DesignWhereUniqueInput;
  set?: DesignWhereUniqueInput[] | DesignWhereUniqueInput;
  disconnect?: DesignWhereUniqueInput[] | DesignWhereUniqueInput;
  update?:
    | DesignUpdateWithWhereUniqueWithoutAuthorInput[]
    | DesignUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | DesignUpsertWithWhereUniqueWithoutAuthorInput[]
    | DesignUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: DesignScalarWhereInput[] | DesignScalarWhereInput;
  updateMany?:
    | DesignUpdateManyWithWhereNestedInput[]
    | DesignUpdateManyWithWhereNestedInput;
}

export interface DesignUpdateManyMutationInput {
  modified?: Boolean;
  deanery?: String;
  location?: String;
  parish?: String;
  longitude?: Float;
  longitudeDir?: String;
  latitude?: Float;
  latitudeDir?: String;
  gridTied?: String;
  generator?: String;
  voltage?: String;
  freq?: String;
  phase?: String;
  area_roof?: Float;
  area_ground?: Float;
}

export interface DesignCreateManyWithoutAuthorInput {
  create?: DesignCreateWithoutAuthorInput[] | DesignCreateWithoutAuthorInput;
  connect?: DesignWhereUniqueInput[] | DesignWhereUniqueInput;
}

export interface DesignUpdateWithoutLoadsDataInput {
  modified?: Boolean;
  author?: UserUpdateOneRequiredWithoutDesignsInput;
  deanery?: String;
  location?: String;
  parish?: String;
  longitude?: Float;
  longitudeDir?: String;
  latitude?: Float;
  latitudeDir?: String;
  gridTied?: String;
  generator?: String;
  voltage?: String;
  freq?: String;
  phase?: String;
  area_roof?: Float;
  area_ground?: Float;
}

export interface DesignWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  modified?: Boolean;
  modified_not?: Boolean;
  author?: UserWhereInput;
  deanery?: String;
  deanery_not?: String;
  deanery_in?: String[] | String;
  deanery_not_in?: String[] | String;
  deanery_lt?: String;
  deanery_lte?: String;
  deanery_gt?: String;
  deanery_gte?: String;
  deanery_contains?: String;
  deanery_not_contains?: String;
  deanery_starts_with?: String;
  deanery_not_starts_with?: String;
  deanery_ends_with?: String;
  deanery_not_ends_with?: String;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  parish?: String;
  parish_not?: String;
  parish_in?: String[] | String;
  parish_not_in?: String[] | String;
  parish_lt?: String;
  parish_lte?: String;
  parish_gt?: String;
  parish_gte?: String;
  parish_contains?: String;
  parish_not_contains?: String;
  parish_starts_with?: String;
  parish_not_starts_with?: String;
  parish_ends_with?: String;
  parish_not_ends_with?: String;
  longitude?: Float;
  longitude_not?: Float;
  longitude_in?: Float[] | Float;
  longitude_not_in?: Float[] | Float;
  longitude_lt?: Float;
  longitude_lte?: Float;
  longitude_gt?: Float;
  longitude_gte?: Float;
  longitudeDir?: String;
  longitudeDir_not?: String;
  longitudeDir_in?: String[] | String;
  longitudeDir_not_in?: String[] | String;
  longitudeDir_lt?: String;
  longitudeDir_lte?: String;
  longitudeDir_gt?: String;
  longitudeDir_gte?: String;
  longitudeDir_contains?: String;
  longitudeDir_not_contains?: String;
  longitudeDir_starts_with?: String;
  longitudeDir_not_starts_with?: String;
  longitudeDir_ends_with?: String;
  longitudeDir_not_ends_with?: String;
  latitude?: Float;
  latitude_not?: Float;
  latitude_in?: Float[] | Float;
  latitude_not_in?: Float[] | Float;
  latitude_lt?: Float;
  latitude_lte?: Float;
  latitude_gt?: Float;
  latitude_gte?: Float;
  latitudeDir?: String;
  latitudeDir_not?: String;
  latitudeDir_in?: String[] | String;
  latitudeDir_not_in?: String[] | String;
  latitudeDir_lt?: String;
  latitudeDir_lte?: String;
  latitudeDir_gt?: String;
  latitudeDir_gte?: String;
  latitudeDir_contains?: String;
  latitudeDir_not_contains?: String;
  latitudeDir_starts_with?: String;
  latitudeDir_not_starts_with?: String;
  latitudeDir_ends_with?: String;
  latitudeDir_not_ends_with?: String;
  gridTied?: String;
  gridTied_not?: String;
  gridTied_in?: String[] | String;
  gridTied_not_in?: String[] | String;
  gridTied_lt?: String;
  gridTied_lte?: String;
  gridTied_gt?: String;
  gridTied_gte?: String;
  gridTied_contains?: String;
  gridTied_not_contains?: String;
  gridTied_starts_with?: String;
  gridTied_not_starts_with?: String;
  gridTied_ends_with?: String;
  gridTied_not_ends_with?: String;
  generator?: String;
  generator_not?: String;
  generator_in?: String[] | String;
  generator_not_in?: String[] | String;
  generator_lt?: String;
  generator_lte?: String;
  generator_gt?: String;
  generator_gte?: String;
  generator_contains?: String;
  generator_not_contains?: String;
  generator_starts_with?: String;
  generator_not_starts_with?: String;
  generator_ends_with?: String;
  generator_not_ends_with?: String;
  voltage?: String;
  voltage_not?: String;
  voltage_in?: String[] | String;
  voltage_not_in?: String[] | String;
  voltage_lt?: String;
  voltage_lte?: String;
  voltage_gt?: String;
  voltage_gte?: String;
  voltage_contains?: String;
  voltage_not_contains?: String;
  voltage_starts_with?: String;
  voltage_not_starts_with?: String;
  voltage_ends_with?: String;
  voltage_not_ends_with?: String;
  freq?: String;
  freq_not?: String;
  freq_in?: String[] | String;
  freq_not_in?: String[] | String;
  freq_lt?: String;
  freq_lte?: String;
  freq_gt?: String;
  freq_gte?: String;
  freq_contains?: String;
  freq_not_contains?: String;
  freq_starts_with?: String;
  freq_not_starts_with?: String;
  freq_ends_with?: String;
  freq_not_ends_with?: String;
  phase?: String;
  phase_not?: String;
  phase_in?: String[] | String;
  phase_not_in?: String[] | String;
  phase_lt?: String;
  phase_lte?: String;
  phase_gt?: String;
  phase_gte?: String;
  phase_contains?: String;
  phase_not_contains?: String;
  phase_starts_with?: String;
  phase_not_starts_with?: String;
  phase_ends_with?: String;
  phase_not_ends_with?: String;
  area_roof?: Float;
  area_roof_not?: Float;
  area_roof_in?: Float[] | Float;
  area_roof_not_in?: Float[] | Float;
  area_roof_lt?: Float;
  area_roof_lte?: Float;
  area_roof_gt?: Float;
  area_roof_gte?: Float;
  area_ground?: Float;
  area_ground_not?: Float;
  area_ground_in?: Float[] | Float;
  area_ground_not_in?: Float[] | Float;
  area_ground_lt?: Float;
  area_ground_lte?: Float;
  area_ground_gt?: Float;
  area_ground_gte?: Float;
  loads_every?: LoadWhereInput;
  loads_some?: LoadWhereInput;
  loads_none?: LoadWhereInput;
  AND?: DesignWhereInput[] | DesignWhereInput;
  OR?: DesignWhereInput[] | DesignWhereInput;
  NOT?: DesignWhereInput[] | DesignWhereInput;
}

export interface DesignUpdateManyWithWhereNestedInput {
  where: DesignScalarWhereInput;
  data: DesignUpdateManyDataInput;
}

export interface DesignCreateWithoutLoadsInput {
  id?: ID_Input;
  modified?: Boolean;
  author: UserCreateOneWithoutDesignsInput;
  deanery: String;
  location: String;
  parish: String;
  longitude?: Float;
  longitudeDir?: String;
  latitude?: Float;
  latitudeDir?: String;
  gridTied?: String;
  generator?: String;
  voltage?: String;
  freq?: String;
  phase?: String;
  area_roof?: Float;
  area_ground?: Float;
}

export interface DesignCreateOneWithoutLoadsInput {
  create?: DesignCreateWithoutLoadsInput;
  connect?: DesignWhereUniqueInput;
}

export interface LoadCreateInput {
  id?: ID_Input;
  name?: String;
  quantity: Float;
  power: Float;
  dayUsage: Float;
  nightUsage: Float;
  usageDays: Float;
  surgeMult: Float;
  design: DesignCreateOneWithoutLoadsInput;
}

export interface DesignUpdateOneRequiredWithoutLoadsInput {
  create?: DesignCreateWithoutLoadsInput;
  update?: DesignUpdateWithoutLoadsDataInput;
  upsert?: DesignUpsertWithoutLoadsInput;
  connect?: DesignWhereUniqueInput;
}

export interface DesignUpdateWithoutAuthorDataInput {
  modified?: Boolean;
  deanery?: String;
  location?: String;
  parish?: String;
  longitude?: Float;
  longitudeDir?: String;
  latitude?: Float;
  latitudeDir?: String;
  gridTied?: String;
  generator?: String;
  voltage?: String;
  freq?: String;
  phase?: String;
  area_roof?: Float;
  area_ground?: Float;
  loads?: LoadUpdateManyWithoutDesignInput;
}

export interface LoadSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LoadWhereInput;
  AND?: LoadSubscriptionWhereInput[] | LoadSubscriptionWhereInput;
  OR?: LoadSubscriptionWhereInput[] | LoadSubscriptionWhereInput;
  NOT?: LoadSubscriptionWhereInput[] | LoadSubscriptionWhereInput;
}

export interface UserUpdateInput {
  username?: String;
  password?: String;
  firstName?: String;
  lastName?: String;
  admin?: Boolean;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions?: UserUpdatepermissionsInput;
  designs?: DesignUpdateManyWithoutAuthorInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  firstName?: String;
  lastName?: String;
  admin: Boolean;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  admin: () => Promise<Boolean>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  admin: () => Promise<AsyncIterator<Boolean>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface LoadConnection {
  pageInfo: PageInfo;
  edges: LoadEdge[];
}

export interface LoadConnectionPromise
  extends Promise<LoadConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LoadEdge>>() => T;
  aggregate: <T = AggregateLoadPromise>() => T;
}

export interface LoadConnectionSubscription
  extends Promise<AsyncIterator<LoadConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LoadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLoadSubscription>() => T;
}

export interface DesignPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  modified: Boolean;
  deanery: String;
  location: String;
  parish: String;
  longitude?: Float;
  longitudeDir?: String;
  latitude?: Float;
  latitudeDir?: String;
  gridTied?: String;
  generator?: String;
  voltage?: String;
  freq?: String;
  phase?: String;
  area_roof?: Float;
  area_ground?: Float;
}

export interface DesignPreviousValuesPromise
  extends Promise<DesignPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  modified: () => Promise<Boolean>;
  deanery: () => Promise<String>;
  location: () => Promise<String>;
  parish: () => Promise<String>;
  longitude: () => Promise<Float>;
  longitudeDir: () => Promise<String>;
  latitude: () => Promise<Float>;
  latitudeDir: () => Promise<String>;
  gridTied: () => Promise<String>;
  generator: () => Promise<String>;
  voltage: () => Promise<String>;
  freq: () => Promise<String>;
  phase: () => Promise<String>;
  area_roof: () => Promise<Float>;
  area_ground: () => Promise<Float>;
}

export interface DesignPreviousValuesSubscription
  extends Promise<AsyncIterator<DesignPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  modified: () => Promise<AsyncIterator<Boolean>>;
  deanery: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  parish: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  longitudeDir: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  latitudeDir: () => Promise<AsyncIterator<String>>;
  gridTied: () => Promise<AsyncIterator<String>>;
  generator: () => Promise<AsyncIterator<String>>;
  voltage: () => Promise<AsyncIterator<String>>;
  freq: () => Promise<AsyncIterator<String>>;
  phase: () => Promise<AsyncIterator<String>>;
  area_roof: () => Promise<AsyncIterator<Float>>;
  area_ground: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateDesign {
  count: Int;
}

export interface AggregateDesignPromise
  extends Promise<AggregateDesign>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDesignSubscription
  extends Promise<AsyncIterator<AggregateDesign>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DesignEdge {
  node: Design;
  cursor: String;
}

export interface DesignEdgePromise extends Promise<DesignEdge>, Fragmentable {
  node: <T = DesignPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DesignEdgeSubscription
  extends Promise<AsyncIterator<DesignEdge>>,
    Fragmentable {
  node: <T = DesignSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  username: String;
  password: String;
  firstName?: String;
  lastName?: String;
  admin: Boolean;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  admin: () => Promise<Boolean>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  permissions: () => Promise<Permission[]>;
  designs: <T = FragmentableArray<Design>>(args?: {
    where?: DesignWhereInput;
    orderBy?: DesignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  admin: () => Promise<AsyncIterator<Boolean>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  designs: <T = Promise<AsyncIterator<DesignSubscription>>>(args?: {
    where?: DesignWhereInput;
    orderBy?: DesignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DesignConnection {
  pageInfo: PageInfo;
  edges: DesignEdge[];
}

export interface DesignConnectionPromise
  extends Promise<DesignConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DesignEdge>>() => T;
  aggregate: <T = AggregateDesignPromise>() => T;
}

export interface DesignConnectionSubscription
  extends Promise<AsyncIterator<DesignConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DesignEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDesignSubscription>() => T;
}

export interface LoadPreviousValues {
  id: ID_Output;
  name?: String;
  quantity: Float;
  power: Float;
  dayUsage: Float;
  nightUsage: Float;
  usageDays: Float;
  surgeMult: Float;
}

export interface LoadPreviousValuesPromise
  extends Promise<LoadPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  quantity: () => Promise<Float>;
  power: () => Promise<Float>;
  dayUsage: () => Promise<Float>;
  nightUsage: () => Promise<Float>;
  usageDays: () => Promise<Float>;
  surgeMult: () => Promise<Float>;
}

export interface LoadPreviousValuesSubscription
  extends Promise<AsyncIterator<LoadPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Float>>;
  power: () => Promise<AsyncIterator<Float>>;
  dayUsage: () => Promise<AsyncIterator<Float>>;
  nightUsage: () => Promise<AsyncIterator<Float>>;
  usageDays: () => Promise<AsyncIterator<Float>>;
  surgeMult: () => Promise<AsyncIterator<Float>>;
}

export interface LoadEdge {
  node: Load;
  cursor: String;
}

export interface LoadEdgePromise extends Promise<LoadEdge>, Fragmentable {
  node: <T = LoadPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LoadEdgeSubscription
  extends Promise<AsyncIterator<LoadEdge>>,
    Fragmentable {
  node: <T = LoadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DesignSubscriptionPayload {
  mutation: MutationType;
  node: Design;
  updatedFields: String[];
  previousValues: DesignPreviousValues;
}

export interface DesignSubscriptionPayloadPromise
  extends Promise<DesignSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DesignPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DesignPreviousValuesPromise>() => T;
}

export interface DesignSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DesignSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DesignSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DesignPreviousValuesSubscription>() => T;
}

export interface Design {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  modified: Boolean;
  deanery: String;
  location: String;
  parish: String;
  longitude?: Float;
  longitudeDir?: String;
  latitude?: Float;
  latitudeDir?: String;
  gridTied?: String;
  generator?: String;
  voltage?: String;
  freq?: String;
  phase?: String;
  area_roof?: Float;
  area_ground?: Float;
}

export interface DesignPromise extends Promise<Design>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  modified: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
  deanery: () => Promise<String>;
  location: () => Promise<String>;
  parish: () => Promise<String>;
  longitude: () => Promise<Float>;
  longitudeDir: () => Promise<String>;
  latitude: () => Promise<Float>;
  latitudeDir: () => Promise<String>;
  gridTied: () => Promise<String>;
  generator: () => Promise<String>;
  voltage: () => Promise<String>;
  freq: () => Promise<String>;
  phase: () => Promise<String>;
  area_roof: () => Promise<Float>;
  area_ground: () => Promise<Float>;
  loads: <T = FragmentableArray<Load>>(args?: {
    where?: LoadWhereInput;
    orderBy?: LoadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DesignSubscription
  extends Promise<AsyncIterator<Design>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  modified: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
  deanery: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  parish: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  longitudeDir: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  latitudeDir: () => Promise<AsyncIterator<String>>;
  gridTied: () => Promise<AsyncIterator<String>>;
  generator: () => Promise<AsyncIterator<String>>;
  voltage: () => Promise<AsyncIterator<String>>;
  freq: () => Promise<AsyncIterator<String>>;
  phase: () => Promise<AsyncIterator<String>>;
  area_roof: () => Promise<AsyncIterator<Float>>;
  area_ground: () => Promise<AsyncIterator<Float>>;
  loads: <T = Promise<AsyncIterator<LoadSubscription>>>(args?: {
    where?: LoadWhereInput;
    orderBy?: LoadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LoadSubscriptionPayload {
  mutation: MutationType;
  node: Load;
  updatedFields: String[];
  previousValues: LoadPreviousValues;
}

export interface LoadSubscriptionPayloadPromise
  extends Promise<LoadSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LoadPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LoadPreviousValuesPromise>() => T;
}

export interface LoadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LoadSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LoadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LoadPreviousValuesSubscription>() => T;
}

export interface Load {
  id: ID_Output;
  name?: String;
  quantity: Float;
  power: Float;
  dayUsage: Float;
  nightUsage: Float;
  usageDays: Float;
  surgeMult: Float;
}

export interface LoadPromise extends Promise<Load>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  quantity: () => Promise<Float>;
  power: () => Promise<Float>;
  dayUsage: () => Promise<Float>;
  nightUsage: () => Promise<Float>;
  usageDays: () => Promise<Float>;
  surgeMult: () => Promise<Float>;
  design: <T = DesignPromise>() => T;
}

export interface LoadSubscription
  extends Promise<AsyncIterator<Load>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Float>>;
  power: () => Promise<AsyncIterator<Float>>;
  dayUsage: () => Promise<AsyncIterator<Float>>;
  nightUsage: () => Promise<AsyncIterator<Float>>;
  usageDays: () => Promise<AsyncIterator<Float>>;
  surgeMult: () => Promise<AsyncIterator<Float>>;
  design: <T = DesignSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateLoad {
  count: Int;
}

export interface AggregateLoadPromise
  extends Promise<AggregateLoad>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLoadSubscription
  extends Promise<AsyncIterator<AggregateLoad>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Design",
    embedded: false
  },
  {
    name: "Load",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
