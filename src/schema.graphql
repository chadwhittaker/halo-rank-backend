# defines my Client-Facing GraphQL Queries and Mutations

# import * from './generated/prisma.graphql'

scalar DateTime

type Query {
  me: User
  user(id: ID, username: String): User
  users: [User]!
  designs: [Design]!
  design(id: ID): Design

  # me: User
  # feed: [Post!]!
  # filterPosts(searchString: String): [Post!]!
  # post(id: ID!): Post
}

type Mutation {
  signup(username: String!, password: String!, firstName: String!, lastName: String): User!
  login(username: String!, password: String!): User!
  logout: SuccessMessage
  createDesign(
    deanery: String!, 
    location: String!, 
    parish: String!,
    longitude: Float,
    longitudeDir: String,
    latitude: Float,
    latitudeDir: String,
    gridTied: String,
    generator: String,
    voltage: String,
    freq: String,
    phase: String,
    area_roof: Int,
    area_ground: Int,
    loads: [LoadCreateWithoutDesignInput!]!,
  ): Design!
  updateDesign(
    id: ID!,
    deanery: String,
    location: String, 
    parish: String,
    longitude: Float,
    longitudeDir: String,
    latitude: Float,
    latitudeDir: String,
    gridTied: String,
    generator: String,
    voltage: String,
    freq: String,
    phase: String,
    area_roof: Int,
    area_ground: Int,
    loads: [LoadCreateWithoutDesignInput],
  ): Design!
  updatePermissions(permissions: [Permission], userId: ID!): User

  # hello: String
  # createDraft(title: String!, content: String): Post!
  # deletePost(id: ID!): Post
  # publish(id: ID!): Post
  # signup(email: String!, password: String!, name: String): AuthPayload!
  # login(email: String!, password: String!): AuthPayload!
}

type SuccessMessage {
  message: String
}